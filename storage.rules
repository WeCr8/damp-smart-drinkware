rules_version = '2';

// Firebase Storage Security Rules for DAMP Smart Drinkware
service firebase.storage {
  match /b/{bucket}/o {
    
    // User profile images - users can upload their own profile pictures
    match /users/{userId}/profile/{allPaths=**} {
      allow read: if true; // Profile images are publicly readable
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Device images - users can upload images of their devices
    match /devices/{userId}/images/{allPaths=**} {
      allow read: if request.auth != null 
                  && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && request.resource.size < 10 * 1024 * 1024 // 10MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Product images - admin only for uploads, public for reads
    match /products/{productId}/images/{allPaths=**} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // App assets - public read, admin write
    match /app-assets/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User data exports - users can access their own data exports
    match /exports/{userId}/{allPaths=**} {
      allow read: if request.auth != null 
                  && (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin(); // Only admin can create exports
    }
    
    // Firmware updates - public read for users to download updates
    match /firmware/{allPaths=**} {
      allow read: if request.auth != null; // Authenticated users only
      allow write: if isAdmin();
    }
    
    // Marketing materials - public read, admin write
    match /marketing/{allPaths=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Admin helper function
    function isAdmin() {
      return request.auth != null 
             && request.auth.token.role == 'admin';
    }
  }
} 